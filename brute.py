import jwt
import string
import itertools

# The JWT token you generated (replace this with your actual token)
token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIiLCJleHAiOjE3MjQzMTgwNTgsImlhdCI6MTcyNDMxNDQ1OCwiYWRtaW4iOmZhbHNlfQ.hKSaoHup7gSdr9UUSfgyvVV9l0JddB7p3EIa8mMsrJE"

# Define the character set to use for brute-forcing
charset = string.ascii_lowercase

# Brute-force length; start with a small length and increase if necessary
max_key_length = 6

def brute_force_jwt(token):
    for length in range(6, max_key_length + 1):
        print(f"Trying keys of length {length}...")
        for key in itertools.product(charset, repeat=length):
            key = ''.join(key)
            try:
                # Attempt to decode the token with the current key
                decoded = jwt.decode(token, key, algorithms=["HS256"])
                print(f"Key found: {key}")
                print(f"Decoded payload: {decoded}")
                return key
            except jwt.ExpiredSignatureError:
                # This means the token was correctly decoded but has expired
                print(f"Key found but token expired: {key}")
                return key
            except jwt.InvalidSignatureError:
                # This means the key is wrong, continue trying
                continue
            except jwt.DecodeError as e:
                # Handle any other decoding errors
                print(f"Decoding failed for key: {key} - Error: {str(e)}")
                continue

    print("Brute force attempt completed. No valid key found.")
    return None

# Run the brute-force attempt
secret_key = brute_force_jwt(token)
if secret_key:
    print(f"Secret key is: {secret_key}")
else:
    print("Failed to brute-force the key. Try increasing max_key_length or using a different charset.")
