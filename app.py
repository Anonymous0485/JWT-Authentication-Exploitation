from flask import Flask, request, jsonify, make_response, render_template, redirect, url_for
import jwt
import datetime

app = Flask(__name__)

# Weak secret key (intentionally weak for brute-forcing)
SECRET_KEY = "secret"

# Simulated database with users
USERS = {
    "user": "password",
    "admin": "adminpassword"
}

def generate_jwt(username):
    payload = {
        "username": username,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(minutes=60),
        "iat": datetime.datetime.utcnow(),
        "admin": True if username == "admin" else False
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
    return token

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        data = request.form
        username = data.get('username')
        password = data.get('password')

        if USERS.get(username) == password:
            token = generate_jwt(username)
            # Show the token on the page after successful login
            return render_template('login.html', token=token)

        return render_template('login.html', error="Invalid credentials")
    
    return render_template('login.html')



@app.route('/admin')
def admin():
    token = request.cookies.get('token')

    if not token:
        return redirect(url_for('login'))

    try:
        data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        if data['admin']:
            return render_template('admin.html', flag="FLAG{jwt_cracked}")
        else:
            return render_template('index.html', message="You are not allowed to view this page!")
    except jwt.ExpiredSignatureError:
        return redirect(url_for('login', error="Token has expired!"))
    except jwt.InvalidTokenError:
        return redirect(url_for('login', error="Invalid token!"))

if __name__ == '__main__':
    app.run(debug=True, port=5001)
